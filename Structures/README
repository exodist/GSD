GSD Structures is the specification and implementation of the data structures
used internally by GSD.

Structures Include:

 * Dictionary (Associative Array)
 * Array (Static immutable(✝) array of objects)

✝Immutable once constructed, allocate with a size, then push/reference 1 or
more objects at a time until full. You cannot change the reference at an index
once added.

See the files in Specification/ for in-depth details.

= Key features =

All structures should be generic, that is they should not care what types of
objects are stored within them, and in the case of dictionary it should not
care what is used as a key. In fact the structures should be fully usable
without GSD.

All structures must be thread safe, and fully synchronized internally. Multiple
theads getting/setting values of a structure shoudl not need to do their own
syncronization to ensure the consistent internal state of the structures. NOTE:
Threads must do their own syncronization if they have race conditions of their
own.

Structures should be lock free where possible, making use of atomic operations
where applicable. Where possible structures should provide transactional and/or
atomic API's.

Structures must accept callbacks for metadata and reference counting on objects
stored within. They must not require these callbacks. Structures must ensure
that reading an object out of the structure bumps the refcount, and that
removing the object from the structure drops the ref count. This must be thread
safe, that is if one thread returns a ref to the object, but another thread
removes the object from the structure, the ref count bump must occur before the
drop.

